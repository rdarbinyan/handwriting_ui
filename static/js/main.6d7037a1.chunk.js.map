{"version":3,"sources":["initDrawing.js","constants.js","createElements.js","index.js"],"names":["initDrawing","canvasEl","drawing","clickX","clickY","clickD","ctx","getContext","tempCanvasEl","document","createElement","tempCtx","fillStyle","addUserGesture","x","y","dragging","push","drawOnCanvas","clearRect","canvas","width","height","i","length","beginPath","moveTo","lineTo","closePath","stroke","fillInputImage","minX","maxX","minY","maxY","CANVAS_WIDTH","CANVAS_HEIGHT","fillRect","drawImage","getElementById","src","toDataURL","style","display","addEventListener","e","mouseX","pageX","offsetLeft","mouseY","pageY","offsetTop","clearCanvas","rootEl","setAttribute","backgroundColor","strokeStyle","lineJoin","lineWidth","appendChild","resultBoxEl","inputImgEl","clearButtonEl","innerText","outputImgEl","createElements","calculate","a","imgBoxes","getElementsByClassName","preprocessCanvas","tensor","num","encoder","predict","tf","predictions","decoder","decoded","result","reshape","tempCanvas","toPixels","inputCanvas","res","fromPixels","resizeNearestNeighbor","mean","toFloat","div","setInterval"],"mappings":"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","file":"static/js/main.6d7037a1.chunk.js","sourcesContent":["import {CANVAS_BG_COLOR, CANVAS_HEIGHT, CANVAS_LINE_WIDTH, CANVAS_WIDTH, CROP} from \"./constants\";\n\nexport const initDrawing = canvasEl => {\n    let [clickX, clickY, clickD] = [[], [], []];\n    let drawing;\n    let ctx = canvasEl.getContext(\"2d\");\n\n    const tempCanvasEl = document.createElement(\"canvas\");\n    const tempCtx = tempCanvasEl.getContext(\"2d\");\n    tempCtx.fillStyle = CANVAS_BG_COLOR;\n\n    const addUserGesture = (x, y, dragging) => {\n        clickX.push(x);\n        clickY.push(y);\n        clickD.push(dragging);\n    };\n\n    const drawOnCanvas = () =>  {\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n        for (let i = 0; i < clickX.length; ++i) {\n            ctx.beginPath();\n            if (clickD[i] && i) {\n                ctx.moveTo(clickX[i - 1], clickY[i - 1]);\n            } else {\n                ctx.moveTo(clickX[i] - 1, clickY[i]);\n            }\n            ctx.lineTo(clickX[i], clickY[i]);\n            ctx.closePath();\n            ctx.stroke();\n        }\n\n        fillInputImage();\n    };\n\n    const fillInputImage = () => {\n        let minX, maxX, minY, maxY;\n        if(CROP && clickX.length) {\n            [minX, maxX] = [Math.min(...clickX) - 3 * CANVAS_LINE_WIDTH, Math.max(...clickX) + 3 * CANVAS_LINE_WIDTH];\n            [minY, maxY] = [Math.min(...clickY) - CANVAS_LINE_WIDTH, Math.max(...clickY) + CANVAS_LINE_WIDTH];\n        } else {\n            [minX, maxX] = [0 - CANVAS_LINE_WIDTH, CANVAS_WIDTH + CANVAS_LINE_WIDTH];\n            [minY, maxY] = [0 - CANVAS_LINE_WIDTH, CANVAS_HEIGHT + CANVAS_LINE_WIDTH];\n        }\n\n        tempCanvasEl.width  = maxX - minX;\n        tempCanvasEl.height = maxY - minY;\n\n        tempCtx.fillRect(0, 0, tempCanvasEl.width, tempCanvasEl.height);\n        tempCtx.drawImage(canvasEl, minX, minY, maxX - minX, maxY - minY, 0, 0, maxX - minX, maxY - minY);\n\n        const inputImgEl = document.getElementById(\"input_img\");\n        inputImgEl.src = tempCanvasEl.toDataURL();\n\n        // show the image\n        document.getElementById(\"result_box\").style.display = \"block\";\n\n        return tempCanvasEl;\n    };\n\n    const clearCanvas = () => {\n        ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n        [clickX, clickY, clickD] = [[], [], []];\n        fillInputImage();\n    };\n\n    canvasEl.addEventListener('mousedown', e => {\n        const [mouseX, mouseY] = [e.pageX - canvasEl.offsetLeft, e.pageY - canvasEl.offsetTop];\n\n        drawing = true;\n        addUserGesture(mouseX, mouseY);\n        drawOnCanvas();\n    });\n\n    canvasEl.addEventListener('mousemove', e => {\n        if (drawing) {\n            const [mouseX, mouseY] = [e.pageX - canvasEl.offsetLeft, e.pageY - canvasEl.offsetTop];\n\n            addUserGesture(mouseX, mouseY, true);\n            drawOnCanvas();\n        }\n    });\n\n    canvasEl.addEventListener('mouseup', e => {\n        drawing = false;\n    });\n\n    canvasEl.addEventListener('mouseleave', e => {\n        drawing = false;\n    });\n\n    return {tempCanvasEl, clearCanvas}\n};","export const CANVAS_WIDTH = 28 * 28;\nexport const CANVAS_HEIGHT = 28 * 28;\nexport const CANVAS_BG_COLOR = '#000000';\nexport const CANVAS_LINE_COLOR = '#FFFFFF';\nexport const CANVAS_LINE_WIDTH = 28 * 4;\nexport const CROP = false;","import {CANVAS_BG_COLOR, CANVAS_HEIGHT, CANVAS_LINE_COLOR, CANVAS_LINE_WIDTH, CANVAS_WIDTH} from \"./constants\";\n\nexport const createElements = () => {\n    const rootEl = document.getElementById('root');\n\n    const canvasEl = document.createElement(\"canvas\");\n    canvasEl.setAttribute(\"width\", `${CANVAS_WIDTH}`);\n    canvasEl.setAttribute(\"height\", `${CANVAS_HEIGHT}`);\n    canvasEl.setAttribute(\"id\", 'canvas');\n    canvasEl.style.backgroundColor = CANVAS_BG_COLOR;\n    let ctx = canvasEl.getContext(\"2d\");\n    ctx.strokeStyle = CANVAS_LINE_COLOR;\n    ctx.lineJoin = 'round';\n    ctx.lineWidth = CANVAS_LINE_WIDTH;\n    rootEl.appendChild(canvasEl);\n\n    const resultBoxEl = document.createElement('div');\n    resultBoxEl.setAttribute('id', 'result_box');\n    const inputImgEl = document.createElement('img');\n    inputImgEl.setAttribute('id', 'input_img');\n    inputImgEl.setAttribute('width', '28');\n    inputImgEl.setAttribute('height', '28');\n    resultBoxEl.appendChild(inputImgEl);\n\n    const clearButtonEl = document.createElement('button');\n    clearButtonEl.innerText = 'Clear Canvas';\n    rootEl.appendChild(clearButtonEl);\n\n    for(let i = 0; i < 10; ++i) {\n        const outputImgEl = document.createElement('img');\n        outputImgEl.setAttribute('class', 'output-img');\n        outputImgEl.setAttribute('width', '56');\n        outputImgEl.setAttribute('height', '56');\n        resultBoxEl.appendChild(outputImgEl);\n    }\n\n    rootEl.appendChild(resultBoxEl);\n\n    return {clearButtonEl, canvasEl}\n};","import * as tf from '@tensorflow/tfjs';\n\nimport {createElements} from \"./createElements\";\nimport {initDrawing} from \"./initDrawing\";\n\nconst {clearButtonEl, canvasEl} = createElements();\n\n(async function() {\n    const encoder = await tf.loadLayersModel(\"https://raw.githubusercontent.com/rdarbinyan/handwriting_learning/master/output/encoder.json/model.json\");\n    const decoder = await tf.loadLayersModel(\"https://raw.githubusercontent.com/rdarbinyan/handwriting_learning/master/output/decoder.json/model.json\");\n\n    const {tempCanvasEl, clearCanvas} = initDrawing(canvasEl);\n    clearButtonEl.addEventListener('click', clearCanvas);\n\n    const preprocessCanvas = async (inputCanvas) => {\n        const res = tf.browser.fromPixels(inputCanvas).resizeNearestNeighbor([28, 28]);\n\n        const tempCanvas = document.createElement(\"canvas\");\n        await tf.browser.toPixels(res, tempCanvas);\n        const imgBox = document.getElementById(\"input_img\");\n        imgBox.src = tempCanvas.toDataURL();\n\n        return tf.browser.fromPixels(inputCanvas)\n            .resizeNearestNeighbor([28, 28])\n            .mean(2)\n            .toFloat()\n            .reshape([1, 784])\n            .div(255.0);\n    };\n\n    async function calculate() {\n        const imgBoxes = document.getElementsByClassName(\"output-img\");\n        let tensor = await preprocessCanvas(tempCanvasEl);\n        for (let i = 0; i < imgBoxes.length; ++i) {\n            const num = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n            num[i] = 1;\n\n            let predictions = await encoder.predict([tensor, tf.tensor([num])]);\n            let decoded = await decoder.predict(predictions[2]);\n\n            const result = decoded.reshape([28, 28]);\n            const tempCanvas = document.createElement(\"canvas\");\n            await tf.browser.toPixels(result, tempCanvas);\n            imgBoxes[i].src = tempCanvas.toDataURL()\n        }\n    }\n\n    setInterval(calculate, 1000);\n})();\n\n"],"sourceRoot":""}