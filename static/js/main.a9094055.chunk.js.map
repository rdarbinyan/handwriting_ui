{"version":3,"sources":["createElements.js","constants.js","initDrawing.js","index.js"],"names":["rootEl","document","getElementById","createDrawingArea","drawingAreaEl","createElement","setAttribute","titleContainerEl","title","innerText","appendChild","canvasEl","style","backgroundColor","ctx","getContext","strokeStyle","lineJoin","lineWidth","parentEl","canvasControlsEl","rangeContainerEl","rangeEl","CANVAS_LINE_WIDTH","rangeLabelEl","innerHTML","clearButtonEl","createCanvasControls","createElements","descriptionEl","rightComponentEl","arrowEl","inputImgEl","arrowBunchEl","resultBoxEl","i","outputImgEl","createRightComponent","initDrawing","drawing","clickX","clickY","clickD","tempCanvasEl","tempCtx","fillStyle","addUserGesture","x","y","dragging","push","drawOnCanvas","valueAsNumber","clearRect","canvas","width","height","length","beginPath","moveTo","lineTo","closePath","stroke","fillInputImage","minX","maxX","minY","maxY","fillRect","drawImage","src","toDataURL","display","showRightComponent","addEventListener","e","mouseX","pageX","offsetLeft","mouseY","pageY","offsetTop","target","preventDefault","rect","getBoundingClientRect","touch","touches","clientX","left","clientY","top","oninput","clearCanvas","calculate","a","imgBoxes","getElementsByClassName","preprocessCanvas","tensor","num","encoder","predict","tf","predictions","decoder","decoded","result","reshape","tempCanvas","toPixels","setTimeout","Promise","all","inputCanvas","res","fromPixels","resizeNearestNeighbor","mean","toFloat","div"],"mappings":"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","file":"static/js/main.a9094055.chunk.js","sourcesContent":["import {CANVAS_BG_COLOR, CANVAS_HEIGHT, CANVAS_LINE_COLOR, CANVAS_LINE_WIDTH, CANVAS_WIDTH} from \"./constants\";\n\nconst rootEl = document.getElementById('root');\n\nconst createCanvasControls = (parentEl) => {\n    const canvasControlsEl = document.createElement('div');\n    canvasControlsEl.setAttribute(\"class\", `canvasControls`);\n\n    const rangeContainerEl = document.createElement('div');\n    rangeContainerEl.setAttribute('class', 'rangeContainer');\n\n    const rangeEl = document.createElement('input');\n    rangeEl.setAttribute('id', 'range');\n    rangeEl.setAttribute('type', 'range');\n    rangeEl.setAttribute('min', `${CANVAS_LINE_WIDTH}`);\n    rangeEl.setAttribute('max', `${CANVAS_LINE_WIDTH * 7}`);\n    rangeEl.setAttribute('value', `${CANVAS_LINE_WIDTH * 4}`);\n\n    const rangeLabelEl = document.createElement('label');\n    rangeLabelEl.setAttribute('for', 'range');\n    rangeLabelEl.innerHTML = \"Brush size\";\n\n    rangeContainerEl.appendChild(rangeLabelEl);\n    rangeContainerEl.appendChild(rangeEl);\n    canvasControlsEl.appendChild(rangeContainerEl);\n\n    const clearButtonEl = document.createElement('button');\n    clearButtonEl.innerText = 'Clear Canvas';\n    canvasControlsEl.appendChild(clearButtonEl);\n\n    parentEl.appendChild(canvasControlsEl);\n\n    return {clearButtonEl, rangeEl};\n};\n\nconst createDrawingArea = () => {\n    const drawingAreaEl = document.createElement('div');\n    drawingAreaEl.setAttribute(\"class\", `drawingArea`);\n\n    const titleContainerEl = document.createElement('div');\n    titleContainerEl.setAttribute(\"class\", `titleContainer`);\n    const title = document.createElement('h2');\n    title.innerText = \"Draw a digit\";\n    titleContainerEl.appendChild(title);\n    drawingAreaEl.appendChild(titleContainerEl);\n\n    const canvasEl = document.createElement(\"canvas\");\n    canvasEl.setAttribute(\"class\", `canvas`);\n    canvasEl.setAttribute(\"width\", `${CANVAS_WIDTH}`);\n    canvasEl.setAttribute(\"height\", `${CANVAS_HEIGHT}`);\n    canvasEl.setAttribute(\"id\", 'canvas');\n    canvasEl.style.backgroundColor = CANVAS_BG_COLOR;\n    let ctx = canvasEl.getContext(\"2d\");\n    ctx.strokeStyle = CANVAS_LINE_COLOR;\n    ctx.lineJoin = 'round';\n    ctx.lineWidth = CANVAS_LINE_WIDTH;\n    drawingAreaEl.appendChild(canvasEl);\n\n\n    const {clearButtonEl, rangeEl} = createCanvasControls(drawingAreaEl);\n    rootEl.appendChild(drawingAreaEl);\n    return {canvasEl, clearButtonEl, rangeEl};\n};\n\nconst createRightComponent = () => {\n    const descriptionEl = document.createElement('div');\n    descriptionEl.setAttribute('id', 'description');\n    descriptionEl.setAttribute('class', 'description');\n    descriptionEl.innerHTML = `<div> <h2>Style Transfer for Handwritten Digits</h2>\n        This neural network transfers the \"style\" of a digit written in the black area to all other digits. \n        There is no exact definition of \"style\", it is learned in an unsupervised manner.\n        <br/> <br/>\n        The idea is the following. An encoder learns to map the image <b>x</b> into a representation <b>z</b> \n        which has all information about the image <i>except</i> its label: the digit <b>y</b>. \n        Then, a decoder takes both <b>z</b> and <b>y</b> and reconstructs the original image. If <b>z</b> \n        has no information about <b>y</b>, and if <b>z</b> and <b>y</b> together are enough to reconstruct <b>x</b>, \n        we can assume that <b>z</b> contains information about the \"style\" of the image. When we have such encoder \n        and decoder, then we can take <b>z</b> from one image and give a different <b>y</b> to see how other digits look like with this \"style\".\n        <br/> <br/>\n        \n        This is made possible by the method described in <a href=\"http://papers.nips.cc/paper/8122-invariant-representations-without-adversarial-training\">\n        \"Invariant Representations without Adversarial Training\"</a> by Daniel Moyer, Shuyang Gao, Rob Brekelmans, Aram Galstyan and Greg Ver Steeg. \n        In short, the system is a variational autoencoder with an additional term in the loss function which minimizes an approximation of the mutual \n        information between <b>z</b> and <b>y</b>. Read more in <a href=\"https://dcmoyer.github.io/selfhosted/blag.html\">Daniel Moyer's blogpost</a>. \n        \n         <br/> <br/>\n        We have <a href=\"https://github.com/rdarbinyan/handwriting_learning\">re-implemented the algorithm in \n        Keras</a>, trained the model on MNIST, and brought the weights to tensorflow.js.</div>`;\n\n    rootEl.appendChild(descriptionEl);\n\n    const rightComponentEl = document.createElement('div');\n    rightComponentEl.setAttribute('id', 'right_component');\n    rightComponentEl.setAttribute('style', 'display:none');\n    rightComponentEl.setAttribute('class', 'rightComponent');\n\n    const arrowEl = document.createElement('svg');\n    arrowEl.innerHTML = `<svg width=\"200px\" height=\"100px\">\n                                <defs>\n                                    <marker id=\"triangle\" viewBox=\"0 0 10 10\"\n                                          refX=\"1\" refY=\"5\" \n                                          markerUnits=\"strokeWidth\"\n                                          markerWidth=\"10\" markerHeight=\"10\"\n                                          orient=\"auto\">\n                                      <path d=\"M 0 0 L 10 5 L 0 10 z\" fill=\"#03A9F4\"/>\n                                    </marker>\n                                  </defs>\n                                <line x1=\"0\" y1=\"50\" x2=\"184\" y2=\"50\" style=\"stroke:#03A9F4;stroke-width:2\" marker-end=\"url(#triangle)\" />\n                        </svg>`;\n\n    rightComponentEl.appendChild(arrowEl);\n\n    const inputImgEl = document.createElement('img');\n    inputImgEl.setAttribute('id', 'input_img');\n    inputImgEl.setAttribute('class', 'inputImg');\n    inputImgEl.setAttribute('width', '28');\n    inputImgEl.setAttribute('height', '28');\n    rightComponentEl.appendChild(inputImgEl);\n\n    const arrowBunchEl = document.createElement('svg');\n    arrowBunchEl.innerHTML = `<svg width=\"200px\" height=\"720px\">\n                                <defs>\n                                    <marker id=\"triangle\" viewBox=\"0 0 10 10\"\n                                          refX=\"1\" refY=\"5\" \n                                          markerUnits=\"strokeWidth\"\n                                          markerWidth=\"10\" markerHeight=\"10\"\n                                          orient=\"auto\">\n                                      <path d=\"M 0 0 L 10 5 L 0 10 z\" fill=\"#03A9F4\"/>\n                                    </marker>\n                                </defs>\n                                <line x1=\"0\" y1=\"360\" x2=\"190\" y2=\"76\" style=\"stroke:#03A9F4;stroke-width:2\" marker-end=\"url(#triangle)\"/>\n                                <line x1=\"0\" y1=\"360\" x2=\"188\" y2=\"135\" style=\"stroke:#03A9F4;stroke-width:2\" marker-end=\"url(#triangle)\"/>\n                                <line x1=\"0\" y1=\"360\" x2=\"187\" y2=\"192\" style=\"stroke:#03A9F4;stroke-width:2\" marker-end=\"url(#triangle)\"/>\n                                <line x1=\"0\" y1=\"360\" x2=\"185\" y2=\"260\" style=\"stroke:#03A9F4;stroke-width:2\" marker-end=\"url(#triangle)\"/>\n                                <line x1=\"0\" y1=\"360\" x2=\"184\" y2=\"328\" style=\"stroke:#03A9F4;stroke-width:2\" marker-end=\"url(#triangle)\"/>\n                                <line x1=\"0\" y1=\"360\" x2=\"184\" y2=\"393\" style=\"stroke:#03A9F4;stroke-width:2\" marker-end=\"url(#triangle)\"/>\n                                <line x1=\"0\" y1=\"360\" x2=\"185\" y2=\"460\" style=\"stroke:#03A9F4;stroke-width:2\" marker-end=\"url(#triangle)\"/>\n                                <line x1=\"0\" y1=\"360\" x2=\"187   \" y2=\"528\" style=\"stroke:#03A9F4;stroke-width:2\" marker-end=\"url(#triangle)\"/>\n                                <line x1=\"0\" y1=\"360\" x2=\"188\" y2=\"585\" style=\"stroke:#03A9F4;stroke-width:2\" marker-end=\"url(#triangle)\"/>\n                                <line x1=\"0\" y1=\"360\" x2=\"190\" y2=\"644\" style=\"stroke:#03A9F4;stroke-width:2\" marker-end=\"url(#triangle)\"/>\n                        </svg>`;\n\n    rightComponentEl.appendChild(arrowBunchEl);\n\n\n    const resultBoxEl = document.createElement('div');\n    resultBoxEl.setAttribute('id', 'result_box');\n    resultBoxEl.setAttribute('class', 'resultBox');\n    for (let i = 0; i < 10; ++i) {\n        const outputImgEl = document.createElement('img');\n        outputImgEl.setAttribute('class', 'outputImg');\n        outputImgEl.setAttribute('width', '56');\n        outputImgEl.setAttribute('height', '56');\n        resultBoxEl.appendChild(outputImgEl);\n    }\n\n    rightComponentEl.appendChild(resultBoxEl);\n\n    rootEl.appendChild(rightComponentEl);\n};\n\nexport const createElements = () => {\n    const {canvasEl, clearButtonEl, rangeEl} = createDrawingArea();\n    createRightComponent();\n\n    return {clearButtonEl, canvasEl, rangeEl}\n};","export const CANVAS_WIDTH = 28 * 28;\nexport const CANVAS_HEIGHT = 28 * 28;\nexport const CANVAS_BG_COLOR = '#000000';\nexport const CANVAS_LINE_COLOR = '#FFFFFF';\nexport const CANVAS_LINE_WIDTH = 28;\nexport const CROP = false;","import {CANVAS_BG_COLOR, CANVAS_HEIGHT, CANVAS_WIDTH, CROP} from \"./constants\";\n\nexport const initDrawing = (canvasEl, rangeEl) => {\n    let [clickX, clickY, clickD] = [[], [], []];\n    let drawing;\n    let ctx = canvasEl.getContext(\"2d\");\n\n    const tempCanvasEl = document.createElement(\"canvas\");\n    const tempCtx = tempCanvasEl.getContext(\"2d\");\n    tempCtx.fillStyle = CANVAS_BG_COLOR;\n\n    const addUserGesture = (x, y, dragging) => {\n        clickX.push(x);\n        clickY.push(y);\n        clickD.push(dragging);\n    };\n\n    const drawOnCanvas = () =>  {\n        ctx.lineWidth = rangeEl.valueAsNumber;\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n        for (let i = 0; i < clickX.length; ++i) {\n            ctx.beginPath();\n            if (clickD[i] && i) {\n                ctx.moveTo(clickX[i - 1], clickY[i - 1]);\n            } else {\n                ctx.moveTo(clickX[i] - 1, clickY[i]);\n            }\n            ctx.lineTo(clickX[i], clickY[i]);\n            ctx.closePath();\n            ctx.stroke();\n        }\n\n        fillInputImage();\n    };\n\n    const fillInputImage = () => {\n        const lineWidth = rangeEl.valueAsNumber;\n        let minX, maxX, minY, maxY;\n        if(CROP && clickX.length) {\n            [minX, maxX] = [Math.min(...clickX) - 3 * lineWidth, Math.max(...clickX) + 3 * lineWidth];\n            [minY, maxY] = [Math.min(...clickY) - lineWidth, Math.max(...clickY) + lineWidth];\n        } else {\n            [minX, maxX] = [0 - lineWidth, CANVAS_WIDTH + lineWidth];\n            [minY, maxY] = [0 - lineWidth, CANVAS_HEIGHT + lineWidth];\n        }\n\n        tempCanvasEl.width  = maxX - minX;\n        tempCanvasEl.height = maxY - minY;\n\n        tempCtx.fillRect(0, 0, tempCanvasEl.width, tempCanvasEl.height);\n        tempCtx.drawImage(canvasEl, minX, minY, maxX - minX, maxY - minY, 0, 0, maxX - minX, maxY - minY);\n\n        const inputImgEl = document.getElementById(\"input_img\");\n        inputImgEl.src = tempCanvasEl.toDataURL();\n\n        // show the image\n        document.getElementById(\"result_box\").style.display = \"flex\";\n\n        return tempCanvasEl;\n    };\n\n    const clearCanvas = () => {\n        ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n        [clickX, clickY, clickD] = [[], [], []];\n        fillInputImage();\n    };\n\n    const showRightComponent = () => {\n        const rightComponentEl = document.getElementById('right_component');\n        const descriptionEl = document.getElementById('description');\n        rightComponentEl.setAttribute('style', '');\n        descriptionEl.setAttribute('style', 'display:none');\n    };\n\n\n    canvasEl.addEventListener('mousedown', e => {\n        const [mouseX, mouseY] = [e.pageX - canvasEl.offsetLeft, e.pageY - canvasEl.offsetTop];\n        if(!clickX.length) {\n            showRightComponent();\n        }\n        drawing = true;\n        addUserGesture(mouseX, mouseY);\n        drawOnCanvas();\n    });\n\n    canvasEl.addEventListener('touchstart', e => {\n        if (e.target === canvasEl) {\n            e.preventDefault();\n        }\n\n        const rect = canvasEl.getBoundingClientRect();\n        const touch = e.touches[0];\n\n        const [mouseX, mouseY] = [touch.clientX - rect.left, touch.clientY - rect.top];\n\n        if(!clickX.length) {\n            showRightComponent();\n        }\n        drawing = true;\n        addUserGesture(mouseX, mouseY);\n        drawOnCanvas();\n    });\n\n    canvasEl.addEventListener('mousemove', e => {\n        if (drawing) {\n            const [mouseX, mouseY] = [e.pageX - canvasEl.offsetLeft, e.pageY - canvasEl.offsetTop];\n\n            addUserGesture(mouseX, mouseY, true);\n            drawOnCanvas();\n        }\n    });\n\n    canvasEl.addEventListener('touchmove', e => {\n        if (e.target === canvasEl) {\n            e.preventDefault();\n        }\n\n        if (drawing) {\n            const rect = canvasEl.getBoundingClientRect();\n            const touch = e.touches[0];\n\n            const [mouseX, mouseY] = [touch.clientX - rect.left, touch.clientY - rect.top];\n\n            drawing = true;\n            addUserGesture(mouseX, mouseY);\n            drawOnCanvas();\n        }\n    });\n\n    canvasEl.addEventListener('mouseup', e => {\n        drawing = false;\n    });\n\n    canvasEl.addEventListener('mouseleave', e => {\n        drawing = false;\n    });\n\n    canvasEl.addEventListener('touchend', e => {\n        if (e.target === canvasEl) {\n            e.preventDefault();\n        }\n        drawing = false;\n    });\n\n    canvasEl.addEventListener('touchcancel', e => {\n        if (e.target === canvasEl) {\n            e.preventDefault();\n        }\n        drawing = false;\n    });\n\n    rangeEl.oninput = drawOnCanvas;\n\n    return {tempCanvasEl, clearCanvas, drawOnCanvas}\n};","import * as tf from '@tensorflow/tfjs';\nimport './index.css';\n\nimport {createElements} from \"./createElements\";\nimport {initDrawing} from \"./initDrawing\";\n\ndocument.getElementById(\"root\").setAttribute('class', 'loader');\n\n(async function() {\n    const [encoder, decoder] = await Promise.all([\n        tf.loadLayersModel(\"https://raw.githubusercontent.com/rdarbinyan/handwriting_ui/master/models/encoder/model.json\"),\n        tf.loadLayersModel(\"https://raw.githubusercontent.com/rdarbinyan/handwriting_ui/master/models/decoder/model.json\")\n    ]);\n\n    document.getElementById(\"root\").setAttribute('class', '');\n\n    const {clearButtonEl, canvasEl, rangeEl} = createElements();\n    const {tempCanvasEl, clearCanvas} = initDrawing(canvasEl, rangeEl);\n\n    clearButtonEl.addEventListener('click', clearCanvas);\n\n    const preprocessCanvas = async (inputCanvas) => {\n        const res = tf.browser.fromPixels(inputCanvas).resizeNearestNeighbor([28, 28]);\n\n        const tempCanvas = document.createElement(\"canvas\");\n        await tf.browser.toPixels(res, tempCanvas);\n        const imgBox = document.getElementById(\"input_img\");\n        imgBox.src = tempCanvas.toDataURL();\n\n        return tf.browser.fromPixels(inputCanvas)\n            .resizeNearestNeighbor([28, 28])\n            .mean(2)\n            .toFloat()\n            .reshape([1, 784])\n            .div(255.0);\n    };\n\n    async function calculate() {\n        const imgBoxes = document.getElementsByClassName(\"outputImg\");\n        let tensor = await preprocessCanvas(tempCanvasEl);\n        for (let i = 0; i < imgBoxes.length; ++i) {\n            const num = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n            num[i] = 1;\n\n            let predictions = await encoder.predict([tensor, tf.tensor([num])]);\n            let decoded = await decoder.predict(predictions[2]);\n\n            const result = decoded.reshape([28, 28]);\n            const tempCanvas = document.createElement(\"canvas\");\n            await tf.browser.toPixels(result, tempCanvas);\n            imgBoxes[i].src = tempCanvas.toDataURL()\n        }\n        setTimeout(calculate, 1000)\n    }\n\n    await calculate();\n})();\n\n"],"sourceRoot":""}