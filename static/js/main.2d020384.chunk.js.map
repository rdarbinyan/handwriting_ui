{"version":3,"sources":["createElements.js","constants.js","initDrawing.js","index.js"],"names":["rootEl","document","getElementById","createDrawingArea","drawingAreaEl","createElement","setAttribute","canvasEl","style","backgroundColor","ctx","getContext","strokeStyle","lineJoin","lineWidth","appendChild","parentEl","canvasControlsEl","rangeEl","CANVAS_LINE_WIDTH","rangeValueEl","innerText","value","clearButtonEl","createCanvasControls","createElements","arrowEl","innerHTML","inputImgEl","arrowBunchEl","resultBoxEl","i","outputImgEl","initDrawing","drawing","clickX","clickY","clickD","tempCanvasEl","tempCtx","fillStyle","addUserGesture","x","y","dragging","push","drawOnCanvas","valueAsNumber","clearRect","canvas","width","height","length","beginPath","moveTo","lineTo","closePath","stroke","fillInputImage","minX","maxX","minY","maxY","fillRect","drawImage","src","toDataURL","display","addEventListener","e","mouseX","pageX","offsetLeft","mouseY","pageY","offsetTop","clearCanvas","calculate","a","imgBoxes","getElementsByClassName","preprocessCanvas","tensor","num","encoder","predict","tf","predictions","decoder","decoded","result","reshape","tempCanvas","toPixels","oninput","inputCanvas","res","fromPixels","resizeNearestNeighbor","mean","toFloat","div","setInterval"],"mappings":"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","file":"static/js/main.2d020384.chunk.js","sourcesContent":["import {CANVAS_BG_COLOR, CANVAS_HEIGHT, CANVAS_LINE_COLOR, CANVAS_LINE_WIDTH, CANVAS_WIDTH} from \"./constants\";\n\nconst rootEl = document.getElementById('root');\n\nconst createCanvasControls = (parentEl) => {\n    const canvasControlsEl = document.createElement('div');\n    canvasControlsEl.setAttribute(\"class\", `canvasControls`);\n\n    const rangeEl = document.createElement('input');\n    rangeEl.setAttribute('id', 'range');\n    rangeEl.setAttribute('type', 'range');\n    rangeEl.setAttribute('min', `${CANVAS_LINE_WIDTH}`);\n    rangeEl.setAttribute('max', `${CANVAS_LINE_WIDTH * 7}`);\n    rangeEl.setAttribute('value', `${CANVAS_LINE_WIDTH * 4}`);\n\n    const rangeValueEl = document.createElement('p');\n    rangeValueEl.setAttribute('id', 'rangeValue');\n    rangeValueEl.innerText = rangeEl.value;\n\n    canvasControlsEl.appendChild(rangeEl);\n    canvasControlsEl.appendChild(rangeValueEl);\n\n    const clearButtonEl = document.createElement('button');\n    clearButtonEl.innerText = 'Clear Canvas';\n    canvasControlsEl.appendChild(clearButtonEl);\n\n    parentEl.appendChild(canvasControlsEl);\n\n    return {clearButtonEl, rangeEl, rangeValueEl};\n};\n\nconst createDrawingArea = () => {\n    const drawingAreaEl = document.createElement('div');\n    drawingAreaEl.setAttribute(\"class\", `drawingArea`);\n\n    const canvasEl = document.createElement(\"canvas\");\n    canvasEl.setAttribute(\"class\", `canvas`);\n    canvasEl.setAttribute(\"width\", `${CANVAS_WIDTH}`);\n    canvasEl.setAttribute(\"height\", `${CANVAS_HEIGHT}`);\n    canvasEl.setAttribute(\"id\", 'canvas');\n    canvasEl.style.backgroundColor = CANVAS_BG_COLOR;\n    let ctx = canvasEl.getContext(\"2d\");\n    ctx.strokeStyle = CANVAS_LINE_COLOR;\n    ctx.lineJoin = 'round';\n    ctx.lineWidth = CANVAS_LINE_WIDTH;\n    drawingAreaEl.appendChild(canvasEl);\n\n\n    const {clearButtonEl, rangeEl, rangeValueEl} = createCanvasControls(drawingAreaEl);\n    rootEl.appendChild(drawingAreaEl)\n    return {canvasEl, clearButtonEl, rangeValueEl, rangeEl};\n};\n\nexport const createElements = () => {\n    const {canvasEl, clearButtonEl, rangeValueEl, rangeEl} = createDrawingArea();\n\n    const arrowEl = document.createElement('svg');\n    arrowEl.innerHTML = `<svg width=\"200px\" height=\"100px\">\n                                <defs>\n                                    <marker id=\"triangle\" viewBox=\"0 0 10 10\"\n                                          refX=\"1\" refY=\"5\" \n                                          markerUnits=\"strokeWidth\"\n                                          markerWidth=\"10\" markerHeight=\"10\"\n                                          orient=\"auto\">\n                                      <path d=\"M 0 0 L 10 5 L 0 10 z\" fill=\"#03A9F4\"/>\n                                    </marker>\n                                  </defs>\n                                <line x1=\"0\" y1=\"50\" x2=\"184\" y2=\"50\" style=\"stroke:#03A9F4;stroke-width:2\" marker-end=\"url(#triangle)\" />\n                        </svg>`;\n\n    rootEl.appendChild(arrowEl)\n\n    const inputImgEl = document.createElement('img');\n    inputImgEl.setAttribute('id', 'input_img');\n    inputImgEl.setAttribute('class', 'inputImg');\n    inputImgEl.setAttribute('width', '28');\n    inputImgEl.setAttribute('height', '28');\n    rootEl.appendChild(inputImgEl);\n\n    const arrowBunchEl = document.createElement('svg');\n    arrowBunchEl.innerHTML = `<svg width=\"200px\" height=\"720px\">\n                                <defs>\n                                    <marker id=\"triangle\" viewBox=\"0 0 10 10\"\n                                          refX=\"1\" refY=\"5\" \n                                          markerUnits=\"strokeWidth\"\n                                          markerWidth=\"10\" markerHeight=\"10\"\n                                          orient=\"auto\">\n                                      <path d=\"M 0 0 L 10 5 L 0 10 z\" fill=\"#03A9F4\"/>\n                                    </marker>\n                                </defs>\n                                <line x1=\"0\" y1=\"360\" x2=\"190\" y2=\"76\" style=\"stroke:#03A9F4;stroke-width:2\" marker-end=\"url(#triangle)\"/>\n                                <line x1=\"0\" y1=\"360\" x2=\"188\" y2=\"135\" style=\"stroke:#03A9F4;stroke-width:2\" marker-end=\"url(#triangle)\"/>\n                                <line x1=\"0\" y1=\"360\" x2=\"187\" y2=\"192\" style=\"stroke:#03A9F4;stroke-width:2\" marker-end=\"url(#triangle)\"/>\n                                <line x1=\"0\" y1=\"360\" x2=\"185\" y2=\"260\" style=\"stroke:#03A9F4;stroke-width:2\" marker-end=\"url(#triangle)\"/>\n                                <line x1=\"0\" y1=\"360\" x2=\"184\" y2=\"328\" style=\"stroke:#03A9F4;stroke-width:2\" marker-end=\"url(#triangle)\"/>\n                                <line x1=\"0\" y1=\"360\" x2=\"184\" y2=\"393\" style=\"stroke:#03A9F4;stroke-width:2\" marker-end=\"url(#triangle)\"/>\n                                <line x1=\"0\" y1=\"360\" x2=\"185\" y2=\"460\" style=\"stroke:#03A9F4;stroke-width:2\" marker-end=\"url(#triangle)\"/>\n                                <line x1=\"0\" y1=\"360\" x2=\"187   \" y2=\"528\" style=\"stroke:#03A9F4;stroke-width:2\" marker-end=\"url(#triangle)\"/>\n                                <line x1=\"0\" y1=\"360\" x2=\"188\" y2=\"585\" style=\"stroke:#03A9F4;stroke-width:2\" marker-end=\"url(#triangle)\"/>\n                                <line x1=\"0\" y1=\"360\" x2=\"190\" y2=\"644\" style=\"stroke:#03A9F4;stroke-width:2\" marker-end=\"url(#triangle)\"/>\n                        </svg>`;\n\n    rootEl.appendChild(arrowBunchEl)\n\n\n    const resultBoxEl = document.createElement('div');\n    resultBoxEl.setAttribute('id', 'result_box');\n    resultBoxEl.setAttribute('class', 'resultBox');\n    for (let i = 0; i < 10; ++i) {\n        const outputImgEl = document.createElement('img');\n        outputImgEl.setAttribute('class', 'outputImg');\n        outputImgEl.setAttribute('width', '56');\n        outputImgEl.setAttribute('height', '56');\n        resultBoxEl.appendChild(outputImgEl);\n    }\n\n    rootEl.appendChild(resultBoxEl);\n\n\n\n    return {clearButtonEl, canvasEl, rangeEl, rangeValueEl}\n};","export const CANVAS_WIDTH = 28 * 28;\nexport const CANVAS_HEIGHT = 28 * 28;\nexport const CANVAS_BG_COLOR = '#000000';\nexport const CANVAS_LINE_COLOR = '#FFFFFF';\nexport const CANVAS_LINE_WIDTH = 28;\nexport const CROP = false;","import {CANVAS_BG_COLOR, CANVAS_HEIGHT, CANVAS_WIDTH, CROP} from \"./constants\";\n\nexport const initDrawing = (canvasEl, rangeEl) => {\n    let [clickX, clickY, clickD] = [[], [], []];\n    let drawing;\n    let ctx = canvasEl.getContext(\"2d\");\n\n    const tempCanvasEl = document.createElement(\"canvas\");\n    const tempCtx = tempCanvasEl.getContext(\"2d\");\n    tempCtx.fillStyle = CANVAS_BG_COLOR;\n\n    const addUserGesture = (x, y, dragging) => {\n        clickX.push(x);\n        clickY.push(y);\n        clickD.push(dragging);\n    };\n\n    const drawOnCanvas = () =>  {\n        ctx.lineWidth = rangeEl.valueAsNumber;\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n        for (let i = 0; i < clickX.length; ++i) {\n            ctx.beginPath();\n            if (clickD[i] && i) {\n                ctx.moveTo(clickX[i - 1], clickY[i - 1]);\n            } else {\n                ctx.moveTo(clickX[i] - 1, clickY[i]);\n            }\n            ctx.lineTo(clickX[i], clickY[i]);\n            ctx.closePath();\n            ctx.stroke();\n        }\n\n        fillInputImage();\n    };\n\n    const fillInputImage = () => {\n        const lineWidth = rangeEl.valueAsNumber;\n        let minX, maxX, minY, maxY;\n        if(CROP && clickX.length) {\n            [minX, maxX] = [Math.min(...clickX) - 3 * lineWidth, Math.max(...clickX) + 3 * lineWidth];\n            [minY, maxY] = [Math.min(...clickY) - lineWidth, Math.max(...clickY) + lineWidth];\n        } else {\n            [minX, maxX] = [0 - lineWidth, CANVAS_WIDTH + lineWidth];\n            [minY, maxY] = [0 - lineWidth, CANVAS_HEIGHT + lineWidth];\n        }\n\n        tempCanvasEl.width  = maxX - minX;\n        tempCanvasEl.height = maxY - minY;\n\n        tempCtx.fillRect(0, 0, tempCanvasEl.width, tempCanvasEl.height);\n        tempCtx.drawImage(canvasEl, minX, minY, maxX - minX, maxY - minY, 0, 0, maxX - minX, maxY - minY);\n\n        const inputImgEl = document.getElementById(\"input_img\");\n        inputImgEl.src = tempCanvasEl.toDataURL();\n\n        // show the image\n        document.getElementById(\"result_box\").style.display = \"flex\";\n\n        return tempCanvasEl;\n    };\n\n    const clearCanvas = () => {\n        ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n        [clickX, clickY, clickD] = [[], [], []];\n        fillInputImage();\n    };\n\n    canvasEl.addEventListener('mousedown', e => {\n        const [mouseX, mouseY] = [e.pageX - canvasEl.offsetLeft, e.pageY - canvasEl.offsetTop];\n\n        drawing = true;\n        addUserGesture(mouseX, mouseY);\n        drawOnCanvas();\n    });\n\n    canvasEl.addEventListener('mousemove', e => {\n        if (drawing) {\n            const [mouseX, mouseY] = [e.pageX - canvasEl.offsetLeft, e.pageY - canvasEl.offsetTop];\n\n            addUserGesture(mouseX, mouseY, true);\n            drawOnCanvas();\n        }\n    });\n\n    canvasEl.addEventListener('mouseup', e => {\n        drawing = false;\n    });\n\n    canvasEl.addEventListener('mouseleave', e => {\n        drawing = false;\n    });\n\n    return {tempCanvasEl, clearCanvas, drawOnCanvas}\n};","import * as tf from '@tensorflow/tfjs';\nimport './index.css';\n\nimport {createElements} from \"./createElements\";\nimport {initDrawing} from \"./initDrawing\";\n\n\n(async function() {\n    const encoder = await tf.loadLayersModel(\"https://raw.githubusercontent.com/rdarbinyan/handwriting_learning/master/output/encoder.json/model.json\");\n    const decoder = await tf.loadLayersModel(\"https://raw.githubusercontent.com/rdarbinyan/handwriting_learning/master/output/decoder.json/model.json\");\n\n    const {clearButtonEl, canvasEl, rangeEl, rangeValueEl} = createElements();\n    const {tempCanvasEl, clearCanvas, drawOnCanvas} = initDrawing(canvasEl, rangeEl);\n\n    rangeEl.oninput = () => {\n        rangeValueEl.innerText = rangeEl.value;\n        drawOnCanvas();\n    };\n    clearButtonEl.addEventListener('click', clearCanvas);\n\n    const preprocessCanvas = async (inputCanvas) => {\n        const res = tf.browser.fromPixels(inputCanvas).resizeNearestNeighbor([28, 28]);\n\n        const tempCanvas = document.createElement(\"canvas\");\n        await tf.browser.toPixels(res, tempCanvas);\n        const imgBox = document.getElementById(\"input_img\");\n        imgBox.src = tempCanvas.toDataURL();\n\n        return tf.browser.fromPixels(inputCanvas)\n            .resizeNearestNeighbor([28, 28])\n            .mean(2)\n            .toFloat()\n            .reshape([1, 784])\n            .div(255.0);\n    };\n\n    async function calculate() {\n        const imgBoxes = document.getElementsByClassName(\"outputImg\");\n        let tensor = await preprocessCanvas(tempCanvasEl);\n        for (let i = 0; i < imgBoxes.length; ++i) {\n            const num = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n            num[i] = 1;\n\n            let predictions = await encoder.predict([tensor, tf.tensor([num])]);\n            let decoded = await decoder.predict(predictions[2]);\n\n            const result = decoded.reshape([28, 28]);\n            const tempCanvas = document.createElement(\"canvas\");\n            await tf.browser.toPixels(result, tempCanvas);\n            imgBoxes[i].src = tempCanvas.toDataURL()\n        }\n    }\n\n    setInterval(calculate, 1000);\n})();\n\n"],"sourceRoot":""}