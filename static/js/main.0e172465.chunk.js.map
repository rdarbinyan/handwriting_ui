{"version":3,"sources":["createElements.js","constants.js","initDrawing.js","index.js"],"names":["createElements","rootEl","document","getElementById","canvasEl","createElement","setAttribute","style","backgroundColor","ctx","getContext","strokeStyle","lineJoin","lineWidth","appendChild","resultBoxEl","inputImgEl","clearButtonEl","innerText","i","outputImgEl","rangeEl","CANVAS_LINE_WIDTH","rangeValueEl","value","initDrawing","drawing","clickX","clickY","clickD","tempCanvasEl","tempCtx","fillStyle","addUserGesture","x","y","dragging","push","drawOnCanvas","valueAsNumber","clearRect","canvas","width","height","length","beginPath","moveTo","lineTo","closePath","stroke","fillInputImage","minX","maxX","minY","maxY","fillRect","drawImage","src","toDataURL","display","addEventListener","e","mouseX","pageX","offsetLeft","mouseY","pageY","offsetTop","clearCanvas","calculate","a","imgBoxes","getElementsByClassName","preprocessCanvas","tensor","num","encoder","predict","tf","predictions","decoder","decoded","result","reshape","tempCanvas","toPixels","oninput","inputCanvas","res","fromPixels","resizeNearestNeighbor","mean","toFloat","div","setInterval"],"mappings":"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","file":"static/js/main.0e172465.chunk.js","sourcesContent":["import {CANVAS_BG_COLOR, CANVAS_HEIGHT, CANVAS_LINE_COLOR, CANVAS_LINE_WIDTH, CANVAS_WIDTH} from \"./constants\";\n\nexport const createElements = () => {\n    const rootEl = document.getElementById('root');\n\n    const canvasEl = document.createElement(\"canvas\");\n    canvasEl.setAttribute(\"width\", `${CANVAS_WIDTH}`);\n    canvasEl.setAttribute(\"height\", `${CANVAS_HEIGHT}`);\n    canvasEl.setAttribute(\"id\", 'canvas');\n    canvasEl.style.backgroundColor = CANVAS_BG_COLOR;\n    let ctx = canvasEl.getContext(\"2d\");\n    ctx.strokeStyle = CANVAS_LINE_COLOR;\n    ctx.lineJoin = 'round';\n    ctx.lineWidth = CANVAS_LINE_WIDTH;\n    rootEl.appendChild(canvasEl);\n\n    const resultBoxEl = document.createElement('div');\n    resultBoxEl.setAttribute('id', 'result_box');\n    const inputImgEl = document.createElement('img');\n    inputImgEl.setAttribute('id', 'input_img');\n    inputImgEl.setAttribute('width', '28');\n    inputImgEl.setAttribute('height', '28');\n    resultBoxEl.appendChild(inputImgEl);\n\n    const clearButtonEl = document.createElement('button');\n    clearButtonEl.innerText = 'Clear Canvas';\n    rootEl.appendChild(clearButtonEl);\n\n    for(let i = 0; i < 10; ++i) {\n        const outputImgEl = document.createElement('img');\n        outputImgEl.setAttribute('class', 'output-img');\n        outputImgEl.setAttribute('width', '56');\n        outputImgEl.setAttribute('height', '56');\n        resultBoxEl.appendChild(outputImgEl);\n    }\n\n    rootEl.appendChild(resultBoxEl);\n\n    const rangeEl = document.createElement('input');\n    rangeEl.setAttribute('id', 'range');\n    rangeEl.setAttribute('type', 'range');\n    rangeEl.setAttribute('min', `${CANVAS_LINE_WIDTH}`);\n    rangeEl.setAttribute('max', `${CANVAS_LINE_WIDTH * 7}`);\n    rangeEl.setAttribute('value', `${CANVAS_LINE_WIDTH * 4}`);\n\n    const rangeValueEl = document.createElement('p');\n    rangeValueEl.setAttribute('id', 'rangeValue');\n    rangeValueEl.innerText = rangeEl.value;\n\n    rootEl.appendChild(rangeEl);\n    rootEl.appendChild(rangeValueEl);\n\n    return {clearButtonEl, canvasEl, rangeEl, rangeValueEl}\n};","export const CANVAS_WIDTH = 28 * 28;\nexport const CANVAS_HEIGHT = 28 * 28;\nexport const CANVAS_BG_COLOR = '#000000';\nexport const CANVAS_LINE_COLOR = '#FFFFFF';\nexport const CANVAS_LINE_WIDTH = 28;\nexport const CROP = false;","import {CANVAS_BG_COLOR, CANVAS_HEIGHT, CANVAS_LINE_WIDTH, CANVAS_WIDTH, CROP} from \"./constants\";\n\nexport const initDrawing = (canvasEl, rangeEl) => {\n    let [clickX, clickY, clickD] = [[], [], []];\n    let drawing;\n    let ctx = canvasEl.getContext(\"2d\");\n\n    const tempCanvasEl = document.createElement(\"canvas\");\n    const tempCtx = tempCanvasEl.getContext(\"2d\");\n    tempCtx.fillStyle = CANVAS_BG_COLOR;\n\n    const addUserGesture = (x, y, dragging) => {\n        clickX.push(x);\n        clickY.push(y);\n        clickD.push(dragging);\n    };\n\n    const drawOnCanvas = () =>  {\n        ctx.lineWidth = rangeEl.valueAsNumber;\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n        for (let i = 0; i < clickX.length; ++i) {\n            ctx.beginPath();\n            if (clickD[i] && i) {\n                ctx.moveTo(clickX[i - 1], clickY[i - 1]);\n            } else {\n                ctx.moveTo(clickX[i] - 1, clickY[i]);\n            }\n            ctx.lineTo(clickX[i], clickY[i]);\n            ctx.closePath();\n            ctx.stroke();\n        }\n\n        fillInputImage();\n    };\n\n    const fillInputImage = () => {\n        const lineWidth = rangeEl.valueAsNumber;\n        let minX, maxX, minY, maxY;\n        if(CROP && clickX.length) {\n            [minX, maxX] = [Math.min(...clickX) - 3 * lineWidth, Math.max(...clickX) + 3 * lineWidth];\n            [minY, maxY] = [Math.min(...clickY) - lineWidth, Math.max(...clickY) + lineWidth];\n        } else {\n            [minX, maxX] = [0 - lineWidth, CANVAS_WIDTH + lineWidth];\n            [minY, maxY] = [0 - lineWidth, CANVAS_HEIGHT + lineWidth];\n        }\n\n        tempCanvasEl.width  = maxX - minX;\n        tempCanvasEl.height = maxY - minY;\n\n        tempCtx.fillRect(0, 0, tempCanvasEl.width, tempCanvasEl.height);\n        tempCtx.drawImage(canvasEl, minX, minY, maxX - minX, maxY - minY, 0, 0, maxX - minX, maxY - minY);\n\n        const inputImgEl = document.getElementById(\"input_img\");\n        inputImgEl.src = tempCanvasEl.toDataURL();\n\n        // show the image\n        document.getElementById(\"result_box\").style.display = \"block\";\n\n        return tempCanvasEl;\n    };\n\n    const clearCanvas = () => {\n        ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n        [clickX, clickY, clickD] = [[], [], []];\n        fillInputImage();\n    };\n\n    canvasEl.addEventListener('mousedown', e => {\n        const [mouseX, mouseY] = [e.pageX - canvasEl.offsetLeft, e.pageY - canvasEl.offsetTop];\n\n        drawing = true;\n        addUserGesture(mouseX, mouseY);\n        drawOnCanvas();\n    });\n\n    canvasEl.addEventListener('mousemove', e => {\n        if (drawing) {\n            const [mouseX, mouseY] = [e.pageX - canvasEl.offsetLeft, e.pageY - canvasEl.offsetTop];\n\n            addUserGesture(mouseX, mouseY, true);\n            drawOnCanvas();\n        }\n    });\n\n    canvasEl.addEventListener('mouseup', e => {\n        drawing = false;\n    });\n\n    canvasEl.addEventListener('mouseleave', e => {\n        drawing = false;\n    });\n\n    return {tempCanvasEl, clearCanvas, drawOnCanvas}\n};","import * as tf from '@tensorflow/tfjs';\n\nimport {createElements} from \"./createElements\";\nimport {initDrawing} from \"./initDrawing\";\n\n\n(async function() {\n    const encoder = await tf.loadLayersModel(\"https://raw.githubusercontent.com/rdarbinyan/handwriting_learning/master/output/encoder.json/model.json\");\n    const decoder = await tf.loadLayersModel(\"https://raw.githubusercontent.com/rdarbinyan/handwriting_learning/master/output/decoder.json/model.json\");\n\n    const {clearButtonEl, canvasEl, rangeEl, rangeValueEl} = createElements();\n    const {tempCanvasEl, clearCanvas, drawOnCanvas} = initDrawing(canvasEl, rangeEl);\n\n    rangeEl.oninput = () => {\n        rangeValueEl.innerText = rangeEl.value;\n        drawOnCanvas();\n    };\n    clearButtonEl.addEventListener('click', clearCanvas);\n\n    const preprocessCanvas = async (inputCanvas) => {\n        const res = tf.browser.fromPixels(inputCanvas).resizeNearestNeighbor([28, 28]);\n\n        const tempCanvas = document.createElement(\"canvas\");\n        await tf.browser.toPixels(res, tempCanvas);\n        const imgBox = document.getElementById(\"input_img\");\n        imgBox.src = tempCanvas.toDataURL();\n\n        return tf.browser.fromPixels(inputCanvas)\n            .resizeNearestNeighbor([28, 28])\n            .mean(2)\n            .toFloat()\n            .reshape([1, 784])\n            .div(255.0);\n    };\n\n    async function calculate() {\n        const imgBoxes = document.getElementsByClassName(\"output-img\");\n        let tensor = await preprocessCanvas(tempCanvasEl);\n        for (let i = 0; i < imgBoxes.length; ++i) {\n            const num = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n            num[i] = 1;\n\n            let predictions = await encoder.predict([tensor, tf.tensor([num])]);\n            let decoded = await decoder.predict(predictions[2]);\n\n            const result = decoded.reshape([28, 28]);\n            const tempCanvas = document.createElement(\"canvas\");\n            await tf.browser.toPixels(result, tempCanvas);\n            imgBoxes[i].src = tempCanvas.toDataURL()\n        }\n    }\n\n    setInterval(calculate, 1000);\n})();\n\n"],"sourceRoot":""}